name: CI/CD Pipeline

on:
  push:
    branches:
      - main


jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.4'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: backend --severity-threshold=high
          command: monitor
          # entryPoint: ./backend
# jobs:
#   app-sonarcloud-scan:
#     name: SonarCloud
#     runs-on: ubuntu-latest

#     services:
#       mongo:
#         image: mongo:latest
#         ports:
#           - 27017:27017

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Python
#       uses: actions/setup-python@v5
#       with:
#         python-version: '3.12.4'

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r backend/requirements.txt

#     - name: Run tests
#       run: |
#         pytest --cov=backend > result.log
#         cat result.log

#     - name: Generate coverage report
#       run: |
#         pytest --cov=backend --cov-report=xml:coverage.xml


#     # Setup sonar-scanner
#     - name: Setup SonarQube
#       uses: warchant/setup-sonar-scanner@v8

#     - name: Upload coverage to SonarCloud
    
#       env:
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       run: |
#         sonar-scanner \
#           -Dsonar.projectKey=hannora-sonar-org_falsk-app \
#           -Dsonar.organization=hannora-sonar-org \
#           -Dsonar.sources=backend \
#           -Dsonar.host.url=https://sonarcloud.io \
#           -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
#           -Dsonar.python.coverage.reportPaths=coverage.xml


          
#   snyk-vulnerability-check:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: ./backend
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Run Snyk to check for vulnerabilities
#         uses: snyk/actions/python@master
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
#       - name: Install Snyk CLI
#         uses: snyk/actions/setup@master
#         with:
#           version: latest
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
#       - name: Snyk Authenticate    
#         run: snyk auth ${{ secrets.SNYK_TOKEN }}

#       - name: Snyk Code Test
#         run: snyk code test --all-projects

#     # runs-on: ubuntu-latest
#     # # env:
#     # #   working-directory: ./backend
#     # steps:
#     # - name: Checkout code
#     #   uses: actions/checkout@v4
    
#     # - name: Set up Python
#     #   uses: actions/setup-python@v5
#     #   with:
#     #     python-version: '3.12.4'

#     # - name: Install dependencies
#     #   run: |
#     #     python -m pip install --upgrade pip
#     #     pip install -r backend/requirements.txt
 
#     # - name: Run Snyk to check for vulnerabilities
#     #   uses: snyk/actions/python@master
#     #   env:
#     #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#     #   # with:
#     #     # args: backend --severity-threshold=high --sarif-file-output=snyk.sarif


#     # # - name: Upload result to GitHub Code Scanning
#     # #   uses: github/codeql-action/upload-sarif@v2
#     # #   with:
#     # #     sarif_file: snyk.sarif


#   publish-app:
#     needs: [app-sonarcloud-scan, snyk-vulnerability-check]
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout Code
#       uses: actions/checkout@v4

#     - name: Set up QEMU
#       uses: docker/setup-qemu-action@v3

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Login to Docker Hub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_TOKEN }}

#     - name: Build and push
#       uses: docker/build-push-action@v6
#       with:
#         context: ./backend
#         push: true
#         tags: ${{ secrets.DOCKERHUB_USERNAME }}/notes:latest
